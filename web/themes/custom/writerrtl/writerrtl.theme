<?php

/**
 * @file
 * Contains preprocess functions for the writerrtl theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\comment\CommentInterface;

/**
 * Implements hook_preprocess_html().
 *
 * Include CSS for code snippets.
 */
function writerrtl_preprocess_html(&$variables) {
  // Turn on styles for code snippets as chosen in the theme settings.
  // To add more options, add the name to the libraries array below,
  // add the description to the options array in theme-settings.php,
  // and add the path to writerrtl.libraries.yml.
  if ($variables["html_attributes"]->offsetGet('dir')->value() == 'rtl') {
    $variables['#attached']['library'][] = 'writerrtl/global-assets-rtl';
    $libraries = [
      'simple' => 'writerrtl/simple-snippets-rtl',
      'night' => 'writerrtl/night-snippets-rtl',
      'inset' => 'writerrtl/inset-snippets-rtl',
      'zebra' => 'writerrtl/zebra-snippets-rtl',
    ];
    // Find the value in the theme settings and use it to lookup the library name.
    $code_snippets_library = $libraries[theme_get_setting('code_snippets')];
    $variables['#attached']['library'][] = $code_snippets_library;

    // Add a theme-specific css class to the body tag.
    $variables['attributes']['class'][] = 'writer';

    // Add no-js class for Modernizr (array not working, only string
    // for class on html_attributes).
    $variables['html_attributes']['class'] = 'no-js';
  } else {
    $variables['#attached']['library'][] = 'writerrtl/global-assets';
    $libraries = [
      'simple' => 'writerrtl/simple-snippets',
      'night' => 'writerrtl/night-snippets',
      'inset' => 'writerrtl/inset-snippets',
      'zebra' => 'writerrtl/zebra-snippets',
    ];
    // Find the value in the theme settings and use it to lookup the library name.
    $code_snippets_library = $libraries[theme_get_setting('code_snippets')];
    $variables['#attached']['library'][] = $code_snippets_library;

    // Add a theme-specific css class to the body tag.
    $variables['attributes']['class'][] = 'writerrtl';

    // Add no-js class for Modernizr (array not working, only string
    // for class on html_attributes).
    $variables['html_attributes']['class'] = 'no-js';
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Include meta tags and fonts using attachment method.
 */
function writerrtl_page_attachments_alter(array &$build) {
  // Set up meta tags.
  // Modern IE & chrome-frame rendering engine tag.
  $rendering_meta = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'X-UA-Compatible',
      'content' => 'IE=edge,chrome=1',
    ],
  ];

  $build['#attached']['html_head'][] = [$rendering_meta, 'rendering_meta'];
}

/**
 * Implements hook_preprocess_page().
 */
function writerrtl_preprocess_page(&$variables) {
  $variables['attributes']['class'][] = 'wrapper';

  // Pull the value from theme settings to define the default content width.
  $content_width = Html::escape(theme_get_setting('content_width'));
  $variables['attributes']['style'][] = 'max-width: ' . $content_width . 'px;';

  // If this page is displaying a node, find whether the publish date will be
  // displayed, so we can add a class to the wrapper.
  if (isset($variables['node']) && ($variables['node'] instanceof NodeInterface)) {
    $content_type = NodeType::load($variables['node']->getType());
    $isDisplayingPublishDate = $content_type->displaySubmitted();

    if (!$isDisplayingPublishDate) {
      $variables['attributes']['class'][] = 'no-publish-date';
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Reformat date info. See http://wiki.whatwg.org/wiki/Time_element.
 */
function writerrtl_preprocess_node(&$variables) {
  // Use Drupal's date formatter service to reformat dates for the <time> element.
  if (!empty($variables['node']) && ($variables['node'] instanceof NodeInterface)) {
    $node_created_ts = $variables['node']->getCreatedTime();
    $date_formatter  = \Drupal::service('date.formatter');

    $variables['date_time']  = $date_formatter->format($node_created_ts, 'custom', 'Y-m-d H:i:s');
    $variables['clean_date'] = $date_formatter->format($node_created_ts, 'custom', 'j M Y');
  }
}

/**
 * Implements template_preprocess_comment().
 *
 * Reformat date info. See http://wiki.whatwg.org/wiki/Time_element.
 */
function writerrtl_preprocess_comment(&$variables) {
  $variables['attributes']['class'][] = 'comment';

  if (is_array($variables['author'])) {
    $username = [
      '#theme' => 'username',
      '#account' => $variables['comment']->getOwner(),
    ];
    $variables['author'] = \Drupal::service('renderer')->render($username);
  }

  // Use Drupal's date formatter service to reformat the date.
  if (!empty($variables['comment']) && ($variables['comment'] instanceof CommentInterface)) {
    $comment_created = $variables['comment']->getCreatedTime();
    $date_formatter  = \Drupal::service('date.formatter');

    $date_time  = $date_formatter->format($comment_created, 'custom', 'Y-m-d H:i:s');
    $clean_date = $date_formatter->format($comment_created, 'custom', 'j M Y');

    // Build a translatable line with clean, html5 date information.
    $variables['submitted'] = t('On <time datetime="@date_time">@clean_date</time>, @comment_author said...', [
        '@date_time' => $date_time,
        '@clean_date' => $clean_date,
        '@comment_author' => $variables['author'],
      ]
    );
  }
}

/**
 * Implements template_preprocess_field__comment().
 */
function writerrtl_preprocess_field__comment(&$variables) {
  $variables['attributes']['class'][] = 'comments';
}

/**
 * Implements template_preprocess_block().
 *
 * We're manually removing contextual links from this block because
 * they aren't that necessary and the position: absolute it brings
 * breaks the positioning of the logo.
 */
function writerrtl_preprocess_block__system_branding_block(&$variables) {
  if (isset($variables['attributes']['class'])) {
    $contextualLinksClassKey = array_search('contextual-region', $variables['attributes']['class']);
    if ($contextualLinksClassKey !== FALSE) {
      // Remove the wrapper class for the links.
      unset($variables['attributes']['class'][$contextualLinksClassKey]);
      // Remove the links themselves.
      unset($variables['title_suffix']['contextual_links']);
      // Remove contextual-links from the elements array.
      unset($variables['elements']['#contextual_links']);
    }
  }
}
